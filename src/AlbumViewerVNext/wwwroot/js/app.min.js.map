{"version":3,"sources":["app.js","Controllers.js","albumController.js","albumService.js","albumServiceLocal.js","albumsController.js","artistController.js"],"names":[],"mappings":"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","file":"app.min.js","sourcesContent":["(function() {\r\n    'use strict';\r\n\r\n    var app = angular.module('app', [\r\n        // Angular modules \r\n        'ngAnimate',\r\n        'ngRoute',\r\n        'ngSanitize'        \r\n\r\n\r\n        // Custom modules \r\n\r\n        // 3rd Party Modules\r\n        \r\n    ]);\r\n\r\n    // config settings\r\n    app.configuration = {\r\n        useLocalData: true\r\n    };\r\n\r\n    app.config([\r\n            '$routeProvider',\r\n            function($routeProvider) {\r\n                $routeProvider\r\n                    .when(\"/albums\", {\r\n                        templateUrl: \"app/views/albums.html\"\r\n                    })\r\n                    .when(\"/album/edit/:albumId\", {\r\n                        templateUrl: \"app/views/editalbum.html\"\r\n                    })\r\n                    .when(\"/album/:albumId\", {\r\n                        templateUrl: \"app/views/album.html\"\r\n                    })\r\n                    .when(\"/artists\", {\r\n                        templateUrl: \"app/views/artists.html\"\r\n                    })\r\n                    .when(\"/artist/:artistId\", {\r\n                        templateUrl: \"app/views/artist.html\"\r\n                    })\r\n                    .when(\"/about\", {\r\n                        templateUrl: \"app/views/about.html\"\r\n                    })\r\n                    .otherwise({\r\n                        redirectTo: '/albums'\r\n                    });\r\n            }\r\n        ])\r\n        .filter('linebreakFilter', function () {        \r\n            return function(text) {\r\n                if (text !== undefined)\r\n                    return text.replace(/\\n/g, '<br />');\r\n                return text;\r\n            };\r\n        });\r\n    \r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('headerController', headerController)\r\n        .controller('artistsController', artistsController);\r\n\r\n    headerController.$inject = ['$scope','$route','$window','albumService'];\r\n\r\n    function headerController($scope,$route,$window,albumService) {\r\n        var vm = $scope;  // straight $scope controller\r\n        \r\n        vm.searchText = \"\";\r\n        vm.searchVisible = false;\r\n\r\n        vm.activeTab = albumService.activeTab;\r\n\r\n        // forward the search key to other controllers\r\n        vm.onKey = function () {        \r\n            $scope.$emit('onsearchkey', vm.searchText);\r\n        }\r\n        \r\n        $scope.searchBlur = function () {            \r\n            vm.searchText = \"\";\r\n        }\r\n        \r\n        vm.$on(\"$locationChangeSuccess\", function () {            \r\n            var path = $window.location.hash;\r\n            vm.activeTab = path.extract(\"#/\", \"/\", true);\r\n            isSearchVisible(vm.activeTab);\r\n            console.log(path, vm.activeTab);            \r\n        });\r\n\r\n        function isSearchVisible(tab) {            \r\n            var tab = tab.toLowerCase();\r\n            \r\n            if (tab == \"albums\" ||\r\n                tab == \"artists\")\r\n                vm.searchVisible = true;\r\n            else\r\n                vm.searchVisible = false;\r\n            console.log(vm.searchVisible);\r\n        }\r\n        return;\r\n    }\r\n\r\n    artistsController.$inject = [\"$scope\",\"$http\"];\r\n\r\n    function artistsController($scope, $http) {\r\n        console.log('artists controller');\r\n\r\n        var vm = this;  // controller as\r\n        vm.artists = [];\r\n        vm.searchText = \"\";\r\n        vm.baseUrl = \"api/\";\r\n\r\n        vm.getArtists = function () {            \r\n            return $http.get(vm.baseUrl + \"artists\")\r\n                .success(function(artists) {\r\n                    vm.artists = artists;\r\n                });\r\n        }\r\n\r\n        $scope.$root.$on('onsearchkey', function (e, searchText) {\r\n            vm.searchText = searchText;           \r\n        });\r\n\r\n        vm.getArtists();\r\n\r\n        return;\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var app = angular\r\n        .module('app')\r\n        .controller('albumController', albumController);\r\n\r\n    \r\n    if (!app.configuration.useLocalData)\r\n        albumController.$inject = ['$routeParams', '$window', '$animate', 'albumService'];\r\n    else\r\n        albumController.$inject = [ '$routeParams', '$window', '$animate','albumServiceLocal'];\r\n\r\n    function albumController($routeParams,$window,$animate,albumService) {        \r\n        var vm = this;\r\n\r\n        vm.album = null;\r\n        vm.selectedArtist = { ArtistName: null, Description: null };\r\n        vm.error = {\r\n            message: null,\r\n            icon: \"warning\",\r\n            reset: function() { vm.error = { message: \"\", icon: \"warning\"} }\r\n        };\r\n\r\n        vm.isSongVisible = false;\r\n        vm.song = {\r\n            Id: 0,\r\n            AlbumId: 0,\r\n            Name: null,\r\n            Length: null\r\n        };\r\n \r\n        vm.saveAlbum = function (album) {\r\n            console.log(album);\r\n            albumService.saveAlbum(album)\r\n                .success(function(album) {\r\n                    vm.error.message = \"Album saved\";\r\n                    vm.error.icon = \"info\";\r\n                    setTimeout(function() {\r\n                        $window.location.hash = \"/album/\" + album.Id;\r\n                    },1000);\r\n                })\r\n                .error(function() {\r\n                    vm.error.message = \"Album saved\";\r\n                    vm.error.icon = \"warning\";\r\n                });\r\n        };\r\n        vm.addSong = function () {\r\n            vm.isSongVisible = true;            \r\n            vm.song = { Id: 0, AlbumId: albumService.album.Id, Name: null, Length: null };\r\n            setTimeout(function() { $(\"#SongName\").focus(); },300);\r\n        };\r\n        vm.saveSong = function (song) {            \r\n            albumService.addSongToAlbum(vm.album, song);\r\n            vm.albums = albumService.albums;\r\n            vm.album = albumService.album;\r\n            \r\n            vm.isSongVisible = false;\r\n        };\r\n        vm.cancelSong = function() {\r\n            vm.isSongVisible = false;\r\n        };\r\n        vm.removeSong = function (song) {\r\n            console.log(song);\r\n            albumService.removeSong(vm.album, song);            \r\n            vm.album = albumService.album;            \r\n        };\r\n        vm.deleteAlbum = function (album) {\r\n            // on purpose! - to minimize vandalization by requiring popup\r\n            if (!confirm(\"Are you sure you want to delete this album?\"))\r\n                return;\r\n\r\n            albumService.deleteAlbum(album)\r\n                .success(function() {\r\n                    vm.albums = albumService.albums;\r\n                    $location.path(\"#/albums\");\r\n                })\r\n                .error(onPageError);\r\n        };\r\n        vm.getAlbum = function(id) {            \r\n            albumService.getAlbum(id, true)\r\n            .success(function (album) {                \r\n                vm.album = album;\r\n            });\r\n            \r\n        }\r\n        vm.bandTypeAhead = function() {\r\n            var $input = $('#BandName');\r\n            \r\n            $input.typeahead({\r\n                source: [],\r\n                autoselect: true\r\n            });\r\n            $input.keyup(function () {                \r\n                var s = $(this).val();\r\n                $.getJSON(\"../api/artistlookup?search=\" + s,\r\n                    function (data) {\r\n                        console.log(data);\r\n                        $input.data('typeahead').source = data;\r\n                    });\r\n            });\r\n        }\r\n                \r\n        // Initialization code\r\n        vm.getAlbum($routeParams.albumId * 1, true);\r\n\r\n        vm.bandTypeAhead();\r\n\r\n        // force explicit animation of the view and edit forms always\r\n        $animate.addClass(\"#MainView\",\"slide-animation\");\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('albumService', albumService);\r\n\r\n    albumService.$inject = ['$http','$q'];\r\n\r\n    function albumService($http,$q) {\r\n        var service = {\r\n            baseUrl: \"api/\",\r\n            albums: [],\r\n            artists: [],\r\n            album: newAlbum(),\r\n            getAlbums: getAlbums,\r\n            getAlbum: getAlbum,\r\n            updateAlbum: updateAlbum,\r\n            saveAlbum: saveAlbum,\r\n            deleteAlbum: deleteAlbum,\r\n            addSongToAlbum: addSongToAlbum,\r\n            removeSong: removeSong,\r\n            newAlbum: newAlbum,\r\n            newSong: newSong,\r\n            activeTab: 'albums'\r\n        };               \r\n        return service;       \r\n\r\n        function newAlbum() {\r\n            return {\r\n                Id: 0,\r\n                ArtistId: 0,\r\n                Tracks: [],\r\n                Artist: {\r\n                    Id: 0,\r\n                    ArtistName: null,\r\n                },\r\n                Title: null,\r\n                AmazonUrl: null,\r\n                ImageUrl: null\r\n            };\r\n        }\r\n\r\n        function newSong() {\r\n            return {\r\n                Id: 0,\r\n                SongName: null,\r\n                Length: null\r\n            };\r\n        }\r\n\r\n        function getAlbums(noCache) {\r\n            // if albums exist just return\r\n            if (!noCache && service.albums && service.albums.length > 0)\r\n                return ww.angular.$httpPromiseFromValue($q, service.albums);                \r\n            \r\n            return $http.get(service.baseUrl + \"albums/\")\r\n                .success(function (data) {                    \r\n                    service.albums = data;                   \r\n                })\r\n                .error(onPageError);\r\n        }\r\n\r\n        function getAlbum(id, useExisting) {            \r\n            if (id === 0 || id === '0') {\r\n                service.album = service.newAlbum();\r\n                return ww.angular.$httpPromiseFromValue($q,service.album);\r\n            }                \r\n            else if (id === -1 || id === '-1' || !id)\r\n                return ww.angular.$httpPromiseFromValue($q,service.album);\r\n\r\n            // if the album is already loaded just return it\r\n            // and return the promise\r\n            if (service.album && useExisting && service.album.pk == id) {\r\n                var deferred = ww.angular.deferredExtender($q.defer());\r\n                deferred.resolve(service.album);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get(service.baseUrl + \"album/\" + id)\r\n                .success(function(album) {\r\n                    service.album = album;\r\n                })\r\n                .error(function (http, status, fnc, httpObj) {\r\n                    console.log(http, httpObj);\r\n                });\r\n        }\r\n        function addSongToAlbum(album, song) {            \r\n            album.Tracks.push(song);\r\n            service.album = album;\r\n        };\r\n\r\n        function removeSong(album, song) {\r\n            var i = findAlbumIndex(album);\r\n            if (i == -1)\r\n                return;\r\n\r\n            var alb = service.albums[i];\r\n            \r\n            alb.Tracks = _.remove(alb.Tracks, function (t) {\r\n                return t.Id != song.Id;\r\n            });\r\n            \r\n            service.album = alb;            \r\n        };\r\n\r\n\r\n        function updateAlbum(album) {            \r\n            var i = findAlbumIndex(album);\r\n            if (i > -1)\r\n                service.albums[i] = album;\r\n            else {\r\n                service.albums.push(album);\r\n\r\n                // remove pk of 0 from list if any\r\n                service.albums = _.remove(service.albums, function (alb) {\r\n                    return album.Id == 0;\r\n                });\r\n            }\r\n\r\n            service.album = album;\r\n        }\r\n\r\n        function saveAlbum(album) {            \r\n            return $http.post(service.baseUrl + \"album\", album)\r\n                .success(function (alb) {                    \r\n                    service.updateAlbum(alb);\r\n                    service.album = alb;                    \r\n            });\r\n        }\r\n\r\n        function deleteAlbum(album){\r\n            return $http.get(service.baseUrl + \"deletealbum/\" + album.Id)\r\n                .success(function() {\r\n                    service.albums = _.remove(service.albums, function(alb){\r\n                        return album.Id != alb.Id;\r\n                    });\r\n                });\r\n        }\r\n\r\n        function findAlbumIndex(album){\r\n            return  _.findIndex(service.albums, function (a) {\r\n                return album.Id == a.Id;\r\n            });\r\n        }\r\n        \r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('albumServiceLocal', albumServiceLocal);\r\n\r\n    albumServiceLocal.$inject = ['$http','$q'];\r\n\r\n    function albumServiceLocal($http,$q) {\r\n        var service = {\r\n            baseUrl: \"data/\",\r\n            albums: [],\r\n            artists: [],\r\n            album: newAlbum(),\r\n            getAlbums: getAlbums,\r\n            getAlbum: getAlbum,\r\n            updateAlbum: updateAlbum,\r\n            saveAlbum: saveAlbum,\r\n            deleteAlbum: deleteAlbum,\r\n            addSongToAlbum: addSongToAlbum,\r\n            removeSong: removeSong,\r\n            newAlbum: newAlbum,\r\n            newSong: newSong,\r\n            activeTab: 'albums'\r\n        };               \r\n        return service;       \r\n\r\n        function newAlbum() {\r\n            return {\r\n                Id: 0,\r\n                ArtistId: 0,\r\n                Tracks: [],\r\n                Artist: {\r\n                    Id: 0,\r\n                    ArtistName: null,\r\n                },\r\n                Title: null,\r\n                AmazonUrl: null,\r\n                ImageUrl: null\r\n            };\r\n        }\r\n\r\n        function newSong() {\r\n            return {\r\n                Id: 0,\r\n                SongName: null,\r\n                Length: null\r\n            };\r\n        }\r\n\r\n        function getAlbums(noCache) {\r\n            // if albums exist just return\r\n            if (!noCache && service.albums && service.albums.length > 0)\r\n                return ww.angular.$httpPromiseFromValue($q, service.albums);                \r\n            \r\n            return $http.get(service.baseUrl + \"albums.js\")\r\n                .success(function (data) {                    \r\n                    service.albums = data;                   \r\n                })\r\n                .error(onPageError);\r\n        }\r\n\r\n        function getAlbum(id, useExisting) {            \r\n            if (id === 0 || id === '0') {\r\n                service.album = service.newAlbum();\r\n                return ww.angular.$httpPromiseFromValue($q,service.album);\r\n            }                \r\n            else if (id === -1 || id === '-1' || !id)\r\n                return ww.angular.$httpPromiseFromValue($q,service.album);\r\n\r\n            // if the album is already loaded just return it\r\n            // and return the promise\r\n            if (service.album && useExisting && service.album.pk == id)               \r\n                return ww.angular.$httpPromiseFromValue($q,service.album);\r\n                        \r\n           // ensure that albums exist - if not load those first and defer                        \r\n           if (service.albums && service.albums.length > 0) {\r\n               // just look up from cached list\r\n                var album = findAlbum(id);\r\n                if (!album)\r\n                    return ww.angular.$httpPromiseFromValue($q, new Error(\"Couldn't find album\"),true);\r\n           }\r\n           \r\n           // otherwise load albums first           \r\n           var d = ww.angular.$httpDeferredExtender($q.defer());               \r\n           service.getAlbums()\r\n                .success(function(albums) {                        \r\n                    service.album = findAlbum(id);\r\n                    if (!service.album)  \r\n                       d.reject(new Error(\"Couldn't find album\"));\r\n                    else\r\n                       d.resolve(service.album);          \r\n                })\r\n                .error(function(err){\r\n                    d.reject(new Error(\"Couldn't find album\"));\r\n                });\r\n           return d.promise; \r\n       \r\n           \r\n            return ww.angular.$httpPromiseFromValue($q, album);\r\n        }\r\n\r\n        \r\n        function addSongToAlbum(album, song) {            \r\n            album.Tracks.push(song);\r\n            service.album = album;\r\n        };\r\n\r\n        function removeSong(album, song) {\r\n            var i = findAlbumIndex(album);\r\n            if (i == -1)\r\n                return;\r\n\r\n            var alb = service.albums[i];\r\n            \r\n            alb.Tracks = _.remove(alb.Tracks, function (t) {\r\n                return t.Id != song.Id;\r\n            });\r\n            \r\n            service.album = alb;            \r\n        };\r\n\r\n\r\n        function updateAlbum(album) {            \r\n            var i = findAlbumIndex(album);\r\n            if (i > -1)\r\n                service.albums[i] = album;\r\n            else {\r\n                service.albums.push(album);\r\n\r\n                // remove pk of 0 from list if any\r\n                service.albums = _.remove(service.albums, function (alb) {\r\n                    return album.Id == 0;\r\n                });\r\n            }\r\n\r\n            service.album = album;\r\n        }\r\n\r\n        function saveAlbum(album) {            \r\n            return $http.post(service.baseUrl + \"album\", album)\r\n                .success(function (alb) {                    \r\n                    service.updateAlbum(alb);\r\n                    service.album = alb;                    \r\n            });\r\n        }\r\n\r\n        function deleteAlbum(album){\r\n            return $http.get(service.baseUrl + \"deletealbum/\" + album.Id)\r\n                .success(function() {\r\n                    service.albums = _.remove(service.albums, function(alb){\r\n                        return album.Id != alb.Id;\r\n                    });\r\n                });\r\n        }\r\n\r\n        function findAlbumIndex(album){\r\n            return  _.findIndex(service.albums, function (a) {\r\n                return album.Id == a.Id;\r\n            });\r\n        }\r\n\r\n        function findAlbum(id) {                      \r\n            return _.find(service.albums, function (a) {                \r\n                return id === a.Id;                    \r\n            });\r\n        }\r\n        \r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var app = angular\r\n        .module('app')\r\n        .controller('albumsController', albumsController);\r\n\r\n    debugger;\r\n\r\n    if (!app.configuration.useLocalData)\r\n        albumsController.$inject = ['$scope', 'albumService'];\r\n    else\r\n        albumsController.$inject = ['$scope','albumServiceLocal'];\r\n    \r\n\r\n    function albumsController($scope,  albumService) {\r\n        debugger;\r\n\r\n        var vm = this;\r\n        vm.albums = null;\r\n\r\n        vm.error = {\r\n            message: null,\r\n            icon: \"warning\",\r\n            reset: function () { vm.error = { message: \"\", icon: \"warning\" } }\r\n        };\r\n\r\n\r\n        // filled view event emit from root form\r\n        vm.searchText = '';\r\n\r\n        vm.artistpk = 0;\r\n\r\n        vm.albumClick = function(album) {\r\n            window.location = \"#/album/\" + album.Id;\r\n        };\r\n        vm.getAlbums = function() {\r\n            albumService.getAlbums() \r\n                .success(function(data) {\r\n                    vm.albums = data;\r\n                })\r\n                .error(function(err) {\r\n                    alert('failed to get albums');\r\n                });            \r\n        }\r\n        vm.addAlbum = function () {            \r\n            albumService.album = albumService.newAlbum();\r\n            albumService.updateAlbum(albumService.album);\r\n            window.location = \"#/album/edit/\" + albumService.album.Id;\r\n        };\r\n        vm.deleteAlbum = function (album) {\r\n            // on purpose! - force explicit prompt to minimize vandalization of demo\r\n            if(!confirm(\"Are you sure you want to delete this album?\"))\r\n                return;\r\n\r\n            albumService.deleteAlbum(album)\r\n                .success(function(){\r\n                    vm.albums = albumService.albums;\r\n                })\r\n                .error(onPageError);\r\n        };\r\n        vm.albumsFilter = function (alb) {\r\n            var search = vm.searchText.toLowerCase();\r\n            if (!alb || !alb.Title)\r\n                return false;\r\n\r\n            if ( alb.Title.toLowerCase().indexOf(search) > -1 ||\r\n                alb.Artist.ArtistName.toLowerCase().indexOf(search) > -1)\r\n                return true;\r\n\r\n            return false;\r\n        };\r\n\r\n        // forwarded from Header controller\r\n        $scope.$root.$on('onsearchkey', function (e,searchText) {\r\n            vm.searchText = searchText;            \r\n        });\r\n\r\n        // controller initialization\r\n        vm.getAlbums();\r\n        \r\n\r\n        return;\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('artistController', artistController);\r\n\r\n    artistController.$inject = [\"$http\",\"$window\",\"$routeParams\",\"$animate\",\"albumService\"];\r\n\r\n    function artistController($http,$window,$routeParams,$animate,albumService) {        \r\n        var vm = this;\r\n\r\n        vm.artist = null;\r\n        vm.baseUrl = \"api/\";\r\n        vm.albums = [];\r\n        vm.error = {\r\n            message: null,\r\n            icon: \"warning\",\r\n            reset: function() { vm.error = { message: \"\", icon: \"warning\" } },\r\n            show: function(msg, icon) {\r\n                vm.error.message = msg;\r\n                vm.error.icon = icon ? icon : \"warning\";\r\n            }\r\n        };\r\n\r\n        vm.getArtist = function(pk) {\r\n            $http.get(vm.baseUrl + \"artist?id=\" + pk)\r\n                .success(function(response) {\r\n                    vm.artist = response.Artist;\r\n                    vm.albums = response.Albums;\r\n                })\r\n                .error(function() {\r\n                    vm.error.show(\"Artist couldn't be loaded.\", \"warning\");\r\n                });\r\n        };\r\n\r\n        vm.saveArtist = function(artist) {\r\n            $http.post(vm.baseUrl + \"artist/\", artist)\r\n                .success(function (response) {\r\n                    vm.artist = response.Artist;\r\n                    vm.albums = response.Albums;\r\n                    $(\"#EditModal\").modal(\"hide\");\r\n                })\r\n                .error(function (error) {\r\n                    vm.error.show(\"Artist couldn't be saved.\", \"warning\");\r\n                });\r\n        }\r\n\r\n        vm.albumClick = function(album) {\r\n            $window.location.hash = \"/album/\" + album.Id;\r\n        };\r\n\r\n        vm.addAlbum = function () {            \r\n            albumService.album = albumService.newAlbum();\r\n            albumService.album.ArtistId = vm.artist.Id;\r\n            albumService.album.Artist.Id = vm.artist.Id;\r\n            albumService.album.Artist.ArtistName = vm.artist.ArtistName;\r\n\r\n            albumService.updateAlbum(albumService.album);\r\n            $window.location.hash = \"/album/edit/0\";\r\n        };\r\n\r\n        vm.getArtist($routeParams.artistId);\r\n\r\n        // force explicit animation of the view and edit forms always\r\n        $animate.addClass(\"#MainView\", \"slide-animation\");\r\n    }\r\n})();\r\n"],"sourceRoot":"/source/"}